{"version":3,"sources":["../ts/builder-base.ts"],"names":["BuilderBase","[object Object]","this","requirements","Map","requirementNames","requirementName","set","name","isOptional","isFulfilled","value","optionalNames","optionalName","has","Error","requirement","get","unfulfilledRequirementNames","values","push","unfulfilledOptionalRequirementNames","unfulfilledRequirementsAndOptionalRequirementNames","errorMessage","namesOfUnfulfilledRequirements","getNamesOfUnfulfilledRequirements","index","length","exports"],"mappings":"oEAsBA,MAAsBA,YAIrBC,cAFQC,KAAAC,aAAgD,IAAIC,IAIlDH,mBAAmBI,GAE5B,IAAK,IAAIC,KAAmBD,EAE3BH,KAAKC,aAAaI,IAAID,EAAiB,CACtCE,KAAMF,EACNG,YAAY,EACZC,aAAa,EACbC,MAAO,OAOAV,gBAAgBW,GAEzB,IAAK,IAAIC,KAAgBD,EAExBV,KAAKC,aAAaI,IAAIM,EAAc,CACnCL,KAAMK,EACNJ,YAAY,EACZC,aAAa,EACbC,MAAO,OAOAV,mBAAmBK,EAAyBK,GAErD,IAAIT,KAAKC,aAAaW,IAAIR,GASzB,MAAM,IAAIS,MAAM,2DACfT,EAAkB,MAVwB,CAE3C,IAAIU,EAAkCd,KAAKC,aAAac,IAAIX,GAE5DU,EAAYN,aAAc,EAC1BM,EAAYL,MAAQA,GAUZV,sBAAsBK,GAE/B,GAAIJ,KAAKC,aAAaW,IAAIR,GAAkB,OAAQJ,KAAKC,aAAac,IAAIX,GAAwCK,MAGjH,MAAM,IAAII,MAAM,oEACfT,EAAkB,MAMXL,oCAET,IAAIiB,EAAwC,GAE5C,IAAK,IAAIF,KAAed,KAAKC,aAAagB,UAEV,IAA3BH,EAAYP,aAAoD,IAA5BO,EAAYN,aAEnDQ,EAA4BE,KAAKJ,EAAYR,MAM/C,OAAOU,EAIEjB,4CAET,IAAIoB,EAAgD,GAEpD,IAAK,IAAIL,KAAed,KAAKC,aAAagB,UAEV,IAA3BH,EAAYP,aAAmD,IAA5BO,EAAYN,aAElDW,EAAoCD,KAAKJ,EAAYR,MAMvD,OAAOa,EAIEpB,2DAET,IAAIqB,EAA+D,GAEnE,IAAK,IAAIN,KAAed,KAAKC,aAAagB,UAET,IAA5BH,EAAYN,aAEfY,EAAmDF,KAAKJ,EAAYR,MAMtE,OAAOc,EAIErB,sCAET,IAAIsB,EAAuB,0EAEvBC,EAA2CtB,KAAKuB,oCAEpD,IAAK,IAAIC,EAAgB,EAAGA,EAAQF,EAA+BG,OAAQD,IAE1EH,GAAgB,IAAMC,EAA+BE,GAAS,IAC1DA,EAAQF,EAA+BG,OAAS,EAAGJ,GAAgB,KAC9DG,EAAQF,EAA+BG,OAAS,IAAGJ,GAAgB,UAM7E,OAFAA,GAAgB,IAePtB,iBAAiBK,GAE1B,GAAIA,EAAiB,CAEpB,GAAIJ,KAAKC,aAAaW,IAAIR,GAAkB,OAAQJ,KAAKC,aAAac,IAAIX,GAAwCI,YAGjH,MAAM,IAAIK,MAAM,yEACRT,EAAkB,MAM3B,IAAK,IAAIU,KAAed,KAAKC,aAAagB,SAEzC,IAAKH,EAAYP,aAAeO,EAAYN,YAAa,OAAO,EAIjE,OAAO,GAxKVkB,QAAA5B,YAAAA","file":"builder-base.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t5:59 PM -- January 26th, 2019.\n *\tProject: builder-base\n */\n\ntype BuilderRequirement = {\n\t\n\tname: string,\n\tisOptional: boolean,\n\tisFulfilled: boolean;\n\tvalue: any;\n\t\n};\n\n/**\n * Enumerates the requirements of a given builder pattern.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport abstract class BuilderBase<E> {\n\t\n\tprivate requirements: Map<string, BuilderRequirement> = new Map<string, BuilderRequirement>();\n\t\n\tpublic constructor() { /* Do nothing. */ }\n\t\n\tprotected addRequirements(...requirementNames: string[]): void {\n\t\t\n\t\tfor (let requirementName of requirementNames) {\n\t\t\t\n\t\t\tthis.requirements.set(requirementName, {\n\t\t\t\tname: requirementName,\n\t\t\t\tisOptional: false,\n\t\t\t\tisFulfilled: false,\n\t\t\t\tvalue: null\n\t\t\t});\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprotected addOptionals(...optionalNames: string[]): void {\n\t\t\n\t\tfor (let optionalName of optionalNames) {\n\t\t\t\n\t\t\tthis.requirements.set(optionalName, {\n\t\t\t\tname: optionalName,\n\t\t\t\tisOptional: true,\n\t\t\t\tisFulfilled: false,\n\t\t\t\tvalue: null\n\t\t\t});\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprotected fulfillRequirement(requirementName: string, value: any): void {\n\t\t\n\t\tif (this.requirements.has(requirementName)) {\n\t\t\t\n\t\t\tlet requirement: BuilderRequirement = this.requirements.get(requirementName) as BuilderRequirement;\n\t\t\t\n\t\t\trequirement.isFulfilled = true;\n\t\t\trequirement.value = value;\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to fulfill a requirement that did not exist: '\" +\n\t\t\t\trequirementName + \"'.\");\n\t\t}\n\t\t\n\t}\n\t\n\tprotected getValueOfRequirement(requirementName: string): any {\n\t\t\n\t\tif (this.requirements.has(requirementName)) return (this.requirements.get(requirementName) as BuilderRequirement).value;\n\t\telse {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to get the value of a requirement that did not exist: '\" +\n\t\t\t\trequirementName + \"'.\");\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprotected getNamesOfUnfulfilledRequirements(): string[] {\n\t\t\n\t\tlet unfulfilledRequirementNames: string[] = [];\n\t\t\n\t\tfor (let requirement of this.requirements.values()) {\n\t\t\t\n\t\t\tif (requirement.isOptional === false && requirement.isFulfilled === false) {\n\t\t\t\t\n\t\t\t\tunfulfilledRequirementNames.push(requirement.name);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn unfulfilledRequirementNames;\n\t\t\n\t}\n\t\n\tprotected getNamesOfUnfulfilledOptionalRequirements(): string[] {\n\t\t\n\t\tlet unfulfilledOptionalRequirementNames: string[] = [];\n\t\t\n\t\tfor (let requirement of this.requirements.values()) {\n\t\t\t\n\t\t\tif (requirement.isOptional === true && requirement.isFulfilled === false) {\n\t\t\t\t\n\t\t\t\tunfulfilledOptionalRequirementNames.push(requirement.name);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn unfulfilledOptionalRequirementNames;\n\t\t\n\t}\n\t\n\tprotected getNamesOfUnfulfilledRequirementsAndOptionalRequirements(): string[] {\n\t\t\n\t\tlet unfulfilledRequirementsAndOptionalRequirementNames: string[] = [];\n\t\t\n\t\tfor (let requirement of this.requirements.values()) {\n\t\t\t\n\t\t\tif (requirement.isFulfilled === false) {\n\t\t\t\t\n\t\t\t\tunfulfilledRequirementsAndOptionalRequirementNames.push(requirement.name);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn unfulfilledRequirementsAndOptionalRequirementNames;\n\t\t\n\t}\n\t\n\tprotected getErrorMessageForIncompleteBuilder(): string {\n\t\t\n\t\tlet errorMessage: string = \"Attempted to build from an incomplete builder. Missing fields include: \";\n\t\t\n\t\tlet namesOfUnfulfilledRequirements: string[] = this.getNamesOfUnfulfilledRequirements();\n\t\t\n\t\tfor (let index: number = 0; index < namesOfUnfulfilledRequirements.length; index++) {\n\t\t\t\n\t\t\terrorMessage += \"'\" + namesOfUnfulfilledRequirements[index] + \"'\";\n\t\t\tif (index < namesOfUnfulfilledRequirements.length - 2) errorMessage += \", \";\n\t\t\telse if (index < namesOfUnfulfilledRequirements.length - 1) errorMessage += \", and \";\n\t\t\t\n\t\t}\n\t\t\n\t\terrorMessage += \".\";\n\t\t\n\t\treturn errorMessage;\n\t\t\n\t}\n\t\n\t/**\n\t * Checks if requirements have been fulfilled. If a requirement name is specified, this method returns true if that\n\t * specific requirement has been fulfilled. Otherwise, this method returns true if all non-optional (required)\n\t * requirements have been fulfilled.\n\t *\n\t * @param {string} requirementName The (optional) name of a requirement.\n\t * @returns {boolean} If a requirement name is specified, true if that specific requirement has been fulfilled.\n\t * Otherwise, true if all non-optional (required) requirements have been fulfilled.\n\t */\n\tprotected checkFulfillment(requirementName?: string): boolean {\n\t\t\n\t\tif (requirementName) {\n\t\t\t\n\t\t\tif (this.requirements.has(requirementName)) return (this.requirements.get(requirementName) as BuilderRequirement).isFulfilled;\n\t\t\telse {\n\t\t\t\t\n\t\t\t\tthrow new Error(\"Attempted to check the fulfillment a requirement that did not exist:\" +\n\t\t\t\t\t\" '\" + requirementName + \"'.\");\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tfor (let requirement of this.requirements.values()) {\n\t\t\t\t\n\t\t\t\tif (!requirement.isOptional && !requirement.isFulfilled) return false;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic abstract build(): E;\n\t\n}"]}